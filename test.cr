# 
# Generated via Dumpling v0.1.0 (https://github.com/obviousscholar/dumpling)
# Be kind; make cool stuff.
# from plonkus
# 

require "base64"
require "compress/gzip"

module Tamsyn14Data
  extend self
  DATA_STRING = "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"

  def unpack
    gzip_bytes = IO::Memory.new(Base64.decode(DATA_STRING))
    io_bytes = IO::Memory.new()
    Compress::Gzip::Reader.open(gzip_bytes) do |gzip|
      IO.copy gzip, io_bytes
    end
    io_bytes
  end

  def unpack_bytes
    unpack.to_slice
  end

  def unpack_string
    String.new unpack_bytes
  end
end
